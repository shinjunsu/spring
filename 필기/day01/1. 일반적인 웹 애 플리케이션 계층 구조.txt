1. 일반적인 웹 애 플리케이션 계층 구조 
- 컨트롤러 : 웹 mvc의 컨트롤러 역할
- 서비스 : 핵심 비즈니스 로직 수현
- 레파지토리 : 데이터베이스에 접근, 도메인 객체를 DB를 저장하고 관리
- 도메인 : 비지니스 도메인 객체

프레젠테이션(Presentation) 계층
컨트롤러(Controller) : HTTP 요청을 받아 적절한 처리를 수행하고, HTTP 응답을 반환합니다.
뷰(View) : 클라이언트에게 보여질 화면을 생성합니다.
비즈니스(Business) 계층
서비스(Service) : 핵심 비즈니스 로직을 구현합니다.
도메인(Domain) : 비즈니스 도메인 객체를 나타내며, 데이터와 비즈니스 로직을 함께 포함합니다.
데이터 액세스(Data Access) 계층
레파지토리(Repository) : 데이터베이스에 접근하여 데이터를 CRUD(Create, Read, Update, Delete)합니다.
이러한 계층 구조는 각 계층의 역할을 명확하게 분리함으로써, 애플리케이션의 유지보수성과 확장성을 높이는 데 도움이 됩니다. 또한, Spring Framework에서는 이러한 계층 구조를 기반으로 다양한 기능과 유틸리티를 제공하고 있습니다.

2. MemberController
- 생성자에 @Autowired가 있으면 스프링이 연관된 객체를 스프링 컨테이너에서 찾아서 넣어준다
이렇게 객체 의존관계를 외부에서 넣어주는 것을 DI(Dependency Injection), 의존성 주입이라 한다.
- 이전에는 개발자가 직접 주입했고, 여기서는 @Autowired에 의해 스프링이 주입해준다.

3.제어역전
- IoC, Inversion of Control
- 개발자가 프레임워크의 기능을 호출하는 형태가 아니라 프레임워크가 개발자의 코드를 호출하기 때문에, 개발자는 전체를 구현하지 않고 자신의 코드를 부분적으로 "끼워넣기"하는 형태로 구현할 수 있다.
- 프레임워크가 객체의 생성, 소멸과 같은 라이프 사이클을 관리하며 스프링으로부터 필요한 객체를 얻어올 수도 있다.
- 객체의 의존성을 역전시켜 객체 간의 결합도를 줄이고 유연한 코드를 작성할 수 있게 하여 가독성 및 코드 중복, 유지보수를 편하게 할 수 있게 한다.

4. Spring Container
- 스프링 컨테이너는 자바 객체의 생명 주기를 관리하며, 생성된 자바 객체들에게 추가적인 기능을 제공하는 역할을
합니다. 여기서 말하는 자바 객체를 스프링에서는 빈(bean)이라고 부른다.
- 개발자는 객체를 생성하고 소멸할 수 있는데, 스프링 컨테이너가 이 역할을 대신해준다. 즉, 제어의 흐름을 외부에서 관리한다.
- 또한, 객체들 간의 의존 관계를 스프링 컨테이너가 런타임 과정에서 알아서 만들어 준다.
- 스프링은 실행시 객체들을 담고있는  Container가 있다.

5.@Autowired
- 필요한 의존 객체의 "타입"에 해당하는 빈을 찾아 주입한다. 기본값이 true이기 때문에 의존성 주입을 할 대상을 찾지 못한다면 애플리케이션 구동에 실패한다.

6. POJO
- plain Old Java Object, 단순한 자바 오브젝트 
- 객체 지향적인 원리에 충실하면서 환경과 기술에 종속되지 않고 필요에 따라 재활용될 수 있는 방식으로 설계된 오브젝트를 말한다.

7. 컴포넌트 스캔의 대상
- component scan의 대상은 main메서드가 있는 class의 동일 패키지 또는 하위 패키지만 Spring이 scan을
하는 대상이 된다.

8.DI 3가지 방법
- Field Injection(필드 주입)
- Setter Injection(수정자 주입)
- Constructor Injection(생성자 주입)

9.SOLID
- 클린코드로 유명한 로버트 마틴이 좋은 객체 지향 설계의 5가지 원칙을 정리
- SRP : 단일 책임 원칙
(single responsibility principle)
- OCP : 개방-폐쇄 원칙
(open-closed principle)
- LSP : 리스코프 치환 원칙
(Liskov substitution principle)
- DIP : 의존관계 역전 원칙
(Dependency inversion principle)

9-1. 단일 책임 원칙
- 한 클래스는 하나의 책임만 가져야 한다.
- 하나의 책임이라는 것은 모호하다.
- 클 수 있고, 작을 수 있다. 
- 기준은 변경이다. 변경이 있을 때 파급효과가 적으면
단일 책임 원칙을 잘 따른 것

9-2. 개방-폐쇄 원칙
- 확장에는 열려있고, 수정, 변경에는 닫혀있다.

9-3. 리스코프 치환 원칙
- 프로그램의 객체는 프로그램의 정확성을 깨뜨리지 않으면서 하위 타입의 인스턴스로 바꿀 수 있어야 한다.
- 다형성에서 하위 클래스는 인터페이스 규약을 다 지켜야 한다는 것, 인터페이스를 구현한 구현체를 믿고 
사용하려면, 이 원칙이 필요하다.
- 단순히 컴파일에 성공하는 것을 넘어서는 이야기

9-4. 인터페이스 분리 원칙
- 특정 클라이언트를 위한 인터페이스 여러 개가 범용 인터페이스 하나보다 낫다.
- 자동차 인터페이스 -> 운전 인터페이스, 정비 인터페이스
- 인터페이스를 분리하면 정비 인터페이스 자체가 변해도, 운전 인터페이스는 영향을 주지 않는다.
- 인터페이스가 명확해지고, 대체 가능성이 높아진다.

9-5. DIP 의존관계 역전 원칙
- 프로그래머는 추상황에 의존해야지, 구체화에 의존하면 안된다. 
의존성 주입은 이 원칙을 따르는 방법 중 하나다.
- 쉽게 이야기해서 구현 클래스에 의존하지 말고, 인터페이스에 의존하라는 뜻

10.JPA
- JPA는 기존의 반복 코드는 물론이고, 기본적인 SQL도 JPA가 직접 만들어서 실행해 준다.
- JPA를 사용하면, SQL과 데이터 중심의 설계에서 객체 중심의 설계로 패러다임을 전화할 수 있다.
- JPA를 사용하면 개발 생산성을 크게 높일 수 있다.





